#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2014  Alex Merry <alex.merry@kdemail.net>
# Copyright 2014  Aurélien Gâteau <agateau@kde.org>
# Copyright 2014  Alex Turbov <i.zaufi@gmail.com>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Python 2/3 compatibility (NB: we require at least 2.7)
from __future__ import division, absolute_import, print_function, unicode_literals

import argparse
import os
import shutil
import subprocess
import sys
import tempfile

from kapidox import *
try:
    from kapidox import depdiagram
    DEPDIAGRAM_AVAILABLE = True
except ImportError:
    DEPDIAGRAM_AVAILABLE = False

def get_tier(yaml_file):
    """Parse the tier out of a yaml file"""
    with open(yaml_file) as f:
        import yaml
        data = yaml.load(f)
        return data['tier']

def generate_group_menu(tiers):
    """Generate a menu for the frameworks"""
    sections = []
    for t in range(1,5):
        frameworks = []
        for fw in tiers[t]:
            rellink = '../../' + fw['outputdir'] + '/html/index.html'
            frameworks.append({
                'href': rellink,
                'name': fw['fancyname']
                })
        sections.append({
            'title': 'Tier ' + str(t),
            'members': frameworks
            })
    return {'group_title': 'Frameworks', 'sections': sections}

def process_toplevel_html_file(inputfile, outputfile, tiers, title,
        api_searchbox=False):
    """Pass a HTML file through the templating filters"""

    frameworks = {}
    gm_sections = []
    for t in range(1,5):
        gm_frameworks = []
        for fw in tiers[t]:
            rellink = fw['outputdir'] + '/html/index.html'
            gm_frameworks.append({
                'href': rellink,
                'name': fw['fancyname']
                })
            frameworks[fw['modulename']] = {'link': rellink, 'name': fw['fancyname']}
        gm_sections.append({
            'title': 'Tier ' + str(t),
            'members': gm_frameworks
            })
    group_menu = {'group_title': 'Frameworks', 'sections': gm_sections}

    mapping = {
            'resources': '.',
            'api_searchbox': api_searchbox,
            # steal the doxygen css from one of the frameworks
            # this means that all the doxygen-provided images etc. will be found
            'doxygencss': tiers[1][0]['outputdir'] + '/html/doxygen.css',
            'title': title,
            'breadcrumbs': {
                'entries': [
                    {
                        'href': 'http://api.kde.org/',
                        'text': 'KDE API Reference'
                    }
                    ]
                },
            'group_menu': group_menu,
            'frameworks': frameworks
        }
    import pystache
    renderer = pystache.Renderer(decode_errors='ignore')
    with open(outputfile, 'w') as outf:
        outf.write(renderer.render_path(inputfile, mapping))


def find_dot_files(dot_dir):
    """Returns a list of path to files ending with .dot in subdirs of `dot_dir`."""
    lst = []
    for (root, dirs, files) in os.walk(dot_dir):
        lst.extend([os.path.join(root, x) for x in files if x.endswith('.dot')])
    return lst


def generate_diagram(png_path, fancyname, tier, dot_files):
    """Generate a dependency diagram for a framework.
    """
    dot_path = tempfile.mkstemp(suffix=fancyname + '.dot')[1]
    try:
        with open(dot_path, 'w') as f:
            with_qt = tier <= 2
            ok = depdiagram.generate(f, dot_files, framework=fancyname, with_qt=with_qt)
            assert ok

        tred_proc = subprocess.Popen(['tred', dot_path], stdout=subprocess.PIPE)
        dot_proc = subprocess.Popen(['dot', '-Tpng', '-o' + png_path],
                                    stdin=tred_proc.stdout)
        tred_proc.stdout.close()
        dot_proc.communicate()
        assert dot_proc >= 0

        if dot_proc.returncode != 0:
            print('dot failed with error code {}'.format(dot_proc.returncode))
            sys.exit(dot_proc.returncode)
    finally:
        os.unlink(dot_path)


def main():
    parser = argparse.ArgumentParser(description='Generate API documentation ' +
            'for the KDE Frameworks')
    parser.add_argument('frameworksdir',
            help='Location of the frameworks modules.')
    parser.add_argument('--title', default='KDE API Documentation',
            help='String to use for page titles.')
    parser.add_argument('--man-pages', action='store_true',
            help='Generate man page documentation.')
    parser.add_argument('--qhp', action='store_true',
            help='Generate Qt Compressed Help documentation.')
    parser.add_argument('--depdiagram-dot-dir',
            help='Generate dependency diagrams, using the .dot files from DIR.',
            metavar="DIR")
    parser.add_argument('--searchengine', action='store_true',
            help="Enable Doxygen's search engine feature.")
    parser.add_argument('--api-searchbox', action='store_true',
            help="Enable the API searchbox (only useful for api.kde.org).")
    parser.add_argument('--doxdatadir',
            help='Location of the HTML header files and support graphics.')
    parser.add_argument('--qtdoc-dir',
            help='Location of (local) Qt documentation; this is searched ' +
                 'for tag files to create links to Qt classes.')
    parser.add_argument('--qtdoc-link',
            help='Override Qt documentation location for the links in the ' +
                 'html files.  May be a path or URL.')
    parser.add_argument('--qtdoc-flatten-links', action='store_true',
            help='Whether to assume all Qt documentation html files ' +
                 'are immediately under QTDOC_LINK (useful if you set ' +
                 'QTDOC_LINK to the online Qt documentation).  Ignored ' +
                 'if QTDOC_LINK is not set.')
    parser.add_argument('--doxygen', default='doxygen',
            help='(Path to) the doxygen executable.')
    parser.add_argument('--qhelpgenerator', default='qhelpgenerator',
            help='(Path to) the qhelpgenerator executable.')
    parser.add_argument('--keep-temp-dirs', action='store_true',
            help='Do not delete temporary dirs, useful for debugging.')
    args = parser.parse_args()

    if args.depdiagram_dot_dir and not DEPDIAGRAM_AVAILABLE:
        print('ERROR: You need to install the Graphviz Python bindings to generate dependency diagrams.\nSee <http://www.graphviz.org/Download.php>.')
        exit(1)

    doxdatadir = find_doxdatadir_or_exit(args.doxdatadir)
    tagfiles = search_for_tagfiles(
            suggestion = args.qtdoc_dir,
            doclink = args.qtdoc_link,
            flattenlinks = args.qtdoc_flatten_links,
            searchpaths = ['/usr/share/doc/qt5', '/usr/share/doc/qt'])

    if not os.path.isdir(args.frameworksdir):
        print(args.frameworksdir + " is not a directory")
        exit(2)

    framework_list = os.listdir(args.frameworksdir)
    tiers = {1:[],2:[],3:[],4:[]}
    for modulename in framework_list:
        fwdir = os.path.join(args.frameworksdir, modulename)
        yaml_file = os.path.join(fwdir, 'metainfo.yaml')

        if not os.path.isfile(yaml_file):
            print("{} does not contain a framework (metainfo.yaml missing)".format(fwdir))
            continue

        fancyname = parse_fancyname(fwdir)
        if not fancyname:
            print('ERROR: Could not find fancy name for {}'.format(fwdir))
            exit(1)
        assert(fancyname)

        outputdir = modulename

        # FIXME: option in yaml file to disable docs
        tier = get_tier(yaml_file)
        if tier is None:
            print("Could not find tier for " + framework + "!")
        elif tier < 1 or tier > 4:
            print("Invalid tier " + tier + " for " + framework + "!")
        else:
            tiers[tier].append({
                'modulename': modulename,
                'fancyname': fancyname,
                'srcdir': fwdir,
                'outputdir': outputdir,
                'dependency_diagram': None,
                })

    for t in range(1,5):
        tiers[t] = sorted(tiers[t], key=lambda f: f['fancyname'].lower())

    copy_dir_contents(os.path.join(doxdatadir,'htmlresource'),'.')

    group_menu = generate_group_menu(tiers)

    def gen_fw_apidocs(fwinfo, rebuild=False):
        generate_apidocs(
                modulename = fwinfo['modulename'],
                fancyname = fwinfo['fancyname'],
                srcdir = fwinfo['srcdir'],
                outputdir = fwinfo['outputdir'],
                doxdatadir = doxdatadir,
                tagfiles = tagfiles,
                dependency_diagram = fwinfo['dependency_diagram'],
                man_pages = args.man_pages,
                qhp = args.qhp,
                searchengine = args.searchengine,
                api_searchbox = args.api_searchbox,
                doxygen = args.doxygen,
                qhelpgenerator = args.qhelpgenerator,
                title = args.title,
                resourcedir = '../..',
                template_mapping = {
                    'breadcrumbs': {
                        'entries': [
                            {
                                'href': 'http://api.kde.org/',
                                'text': 'KDE API Reference'
                            },
                            {
                                'href': '../../index.html',
                                'text': 'Frameworks'
                            }
                            ]
                        },
                    'group_menu': group_menu
                    },
                doxyfile_entries = {
                    'WARN_IF_UNDOCUMENTED': True
                    }
                )
        if not rebuild:
            tagfile = os.path.abspath(
                        os.path.join(
                            fwinfo['outputdir'],
                            'html',
                            fwinfo['modulename']+'.tags'))
            tagfiles.append((tagfile,'../../' + fwinfo['outputdir'] + '/html/'))

    process_toplevel_html_file(os.path.join(doxdatadir, 'frameworks.html'), 'index.html',
            title=args.title, tiers=tiers, api_searchbox=args.api_searchbox)

    try:
        if args.depdiagram_dot_dir:
            tmp_dir = tempfile.mkdtemp(prefix='kapidox-deps-')
            dot_files = find_dot_files(args.depdiagram_dot_dir)
            assert(dot_files)
        else:
            tmp_dir = None

        for t in range(1,5):
            for fwinfo in tiers[t]:
                if args.depdiagram_dot_dir:
                    png_path = os.path.join(tmp_dir, fwinfo['modulename']) + '.png'
                    generate_diagram(png_path, fwinfo['fancyname'], t, dot_files)
                    fwinfo['dependency_diagram'] = png_path
                gen_fw_apidocs(fwinfo)
            if (t >= 3):
                # Rebuild for interdependencies
                # FIXME: can we be cleverer about deps?
                for fwinfo in tiers[t]:
                    shutil.rmtree(fwinfo['outputdir'])
                    gen_fw_apidocs(fwinfo, rebuild=True)
    finally:
        if tmp_dir:
            if args.keep_temp_dirs:
                print('Kept temp dir at {}'.format(tmp_dir))
            else:
                shutil.rmtree(tmp_dir)


if __name__ == "__main__":
    main()

